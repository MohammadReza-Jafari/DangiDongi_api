# Generated by Django 3.1.3 on 2020-11-29 18:56

import django.core.validators
from django.db import migrations, models
import user.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(error_messages={'blank': 'ایمیل اجباری می باشد.', 'null': 'ایمیل اجباری می باشد.', 'unique': 'کاربری با این ایمیل موجود می باشد'}, max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(error_messages={'blank': 'نام اجباری می باشد.', 'max_length': 'نام نهایتا می تواند 30 کاراکتر باشد', 'null': 'نام اجباری می باشد.'}, max_length=30)),
                ('last_name', models.CharField(error_messages={'blank': 'نام خانوادگی اجباری می باشد.', 'max_length': 'نام خانوادگی نهایتا می تواند 50 کاراکتر باشد', 'null': 'نام خانوادگی اجباری می باشد.'}, max_length=50)),
                ('profile_image', models.ImageField(error_messages={'invalid_extension': 'فقط فایل های با پسوند jpg و png و jpeg قابل قبول می باشند'}, null=True, upload_to=user.models.get_save_image_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpeg', 'png', 'jpg'])])),
                ('phone_number', models.CharField(max_length=13, null=True)),
                ('activation_code', models.CharField(default=None, max_length=255, null=True)),
                ('reset_code', models.IntegerField(default=None, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
